// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package aws

import (
	"context"
	"github.com/aws/aws-sdk-go/service/s3/s3manager"
	"sync"
)

var (
	locks3BatchDeleteClientMockDelete sync.RWMutex
)

// Ensure, that s3BatchDeleteClientMock does implement s3BatchDeleteClient.
// If this is not the case, regenerate this file with moq.
var _ s3BatchDeleteClient = &s3BatchDeleteClientMock{}

// s3BatchDeleteClientMock is a mock implementation of s3BatchDeleteClient.
//
//     func TestSomethingThatUsess3BatchDeleteClient(t *testing.T) {
//
//         // make and configure a mocked s3BatchDeleteClient
//         mockeds3BatchDeleteClient := &s3BatchDeleteClientMock{
//             DeleteFunc: func(in1 context.Context, in2 s3manager.BatchDeleteIterator) error {
// 	               panic("mock out the Delete method")
//             },
//         }
//
//         // use mockeds3BatchDeleteClient in code that requires s3BatchDeleteClient
//         // and then make assertions.
//
//     }
type s3BatchDeleteClientMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(in1 context.Context, in2 s3manager.BatchDeleteIterator) error

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 s3manager.BatchDeleteIterator
		}
	}
}

// Delete calls DeleteFunc.
func (mock *s3BatchDeleteClientMock) Delete(in1 context.Context, in2 s3manager.BatchDeleteIterator) error {
	if mock.DeleteFunc == nil {
		panic("s3BatchDeleteClientMock.DeleteFunc: method is nil but s3BatchDeleteClient.Delete was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 s3manager.BatchDeleteIterator
	}{
		In1: in1,
		In2: in2,
	}
	locks3BatchDeleteClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	locks3BatchDeleteClientMockDelete.Unlock()
	return mock.DeleteFunc(in1, in2)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockeds3BatchDeleteClient.DeleteCalls())
func (mock *s3BatchDeleteClientMock) DeleteCalls() []struct {
	In1 context.Context
	In2 s3manager.BatchDeleteIterator
} {
	var calls []struct {
		In1 context.Context
		In2 s3manager.BatchDeleteIterator
	}
	locks3BatchDeleteClientMockDelete.RLock()
	calls = mock.calls.Delete
	locks3BatchDeleteClientMockDelete.RUnlock()
	return calls
}
