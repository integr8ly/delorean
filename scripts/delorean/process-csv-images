#!/usr/bin/env bash

# This script locates the current cluster service version file (csv) for a given product and replaces all occurrences of internal image registries with a deloeran version and generates an image_mirror_mapping file.
#
# Example: Running the script and checking the changes produced
#
#$ ./scripts/process-csv-images 3scale
#$ grep delorean manifests/integreatly-3scale/3scale-0.5.0/3scale-operator.v0.5.0.clusterserviceversion.yaml
#    image: quay.io/integreatly/delorean/3scale-amp2-apicast-gateway-rhel8_3scale2.8
#    image: quay.io/integreatly/delorean/3scale-amp2-backend-rhel7_3scale2.8
#    image: quay.io/integreatly/delorean/3scale-amp2-system-rhel7_3scale2.8
#    image: quay.io/integreatly/delorean/3scale-amp2-zync-rhel7_3scale2.8
#    image: quay.io/integreatly/delorean/3scale-amp2-memcached-rhel7_3scale2.8
#$ cat manifests/integreatly-3scale/image_mirror_mapping
#registry-proxy.engineering.redhat.com/rh-osbs/3scale-amp2-apicast-gateway-rhel8:3scale2.8 quay.io/integreatly/delorean/3scale-amp2-apicast-gateway-rhel8_3scale2.8
#registry-proxy.engineering.redhat.com/rh-osbs/3scale-amp2-backend-rhel7:3scale2.8 quay.io/integreatly/delorean/3scale-amp2-backend-rhel7_3scale2.8
#registry-proxy.engineering.redhat.com/rh-osbs/3scale-amp2-system-rhel7:3scale2.8 quay.io/integreatly/delorean/3scale-amp2-system-rhel7_3scale2.8
#registry-proxy.engineering.redhat.com/rh-osbs/3scale-amp2-zync-rhel7:3scale2.8 quay.io/integreatly/delorean/3scale-amp2-zync-rhel7_3scale2.8
#registry-proxy.engineering.redhat.com/rh-osbs/3scale-amp2-memcached-rhel7:3scale2.8 quay.io/integreatly/delorean/3scale-amp2-memcached-rhel7_3scale2.8

set -e

WORK_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source $WORK_DIR/csv_helper

RH_REGISTRY_PROD=registry.redhat.io/
RH_REGISTRY_STAGE=registry.stage.redhat.io/
RH_REGISTRY_OSBS=registry-proxy.engineering.redhat.com/rh-osbs
DELOREAN_REGISTRY=quay.io/integreatly/delorean
IMAGE_PULL_SECRET=integreatly-delorean-pull-secret

collect_csv_images() {
    csv_images=(`grep -o ''${RH_REGISTRY_PROD}'.*\|'${RH_REGISTRY_STAGE}'.*' $1 | sed 's/"//' || true`)
}

process_csv_images() {
    echo "Generate Image Mirror Mapping for $2"
    image_mirror_mapping=${MANIFESTS_DIR}/integreatly-${2}/image_mirror_mapping

    for image in "${csv_images[@]}"
    do
        echo "Processing image $image"
        # The below logic is specific to the amq-broker image
        if [[ $image == *"amq-broker"* ]]; then
            image_version="$(echo $image | cut -f2 -d":")"
            group_image_version="$(echo ${image_version} | tr -d '.')"
            major_version="$(echo $image_version | cut -f1 -d".")"
            osbs_image_path="amq-broker-$major_version-amq-broker-$group_image_version-openshift:${image_version}"
        else
            image_path="$(echo $image | grep / | cut -d/ -f2-)"
            osbs_image_path="$(echo $image_path | sed 's/\//-/')"
        fi
        delorean_image_tag="$(echo $osbs_image_path | sed 's/:/_/' | sed 's/@sha256.*$/_latest/')"

        osbs_image="${RH_REGISTRY_OSBS}/${osbs_image_path}"
        delorean_image="${DELOREAN_REGISTRY}:${delorean_image_tag}"

        echo "CSV Image: ${image}"
        echo "OSBS Image: ${osbs_image}"
        echo "Delorean Image: ${delorean_image}"

        #Update image reference in csv to use delorean registry
        sed -i.bak "s|${image}|${delorean_image}|g" $1
        rm $1.bak

        #Add the image mapping if it doesn't already exist
        osbs_delorean_map="${osbs_image} ${delorean_image}"
        grep -qF ${osbs_image} $image_mirror_mapping || echo $osbs_delorean_map >> $image_mirror_mapping
    done
}

update_image_pull_secret() {
  current_csv=$(get_current_csv_file $PRODUCT)
  case $PRODUCT in
  "amq-online" | "3scale")
    yq w -i ${current_csv} spec.install.spec.deployments[0].spec.template.spec.imagePullSecrets[0].name ${IMAGE_PULL_SECRET}
    ;;
  *)
    echo "skipping pull secret"
  esac
}

PRODUCT=$1

process_csv() {
    echo "~~~~~~"
    echo "Process CSV images for Product $PRODUCT"
    echo "~~~~~~"
    current_csv=$(get_current_csv_file $PRODUCT)
    echo $current_csv

    yq_images_script="$WORK_DIR/$(get_current_csv $PRODUCT)-images-script.yaml"
    if test -f "$yq_images_script"; then
        echo "$yq_images_script exists"
        if [[ ! $(grep DV_IMAGE $current_csv) ]]; then
          echo "required image env vars not present so adding"
          yq w -i -s $yq_images_script $current_csv
        fi
    fi

    collect_csv_images $current_csv
    process_csv_images $current_csv $PRODUCT
}

if [ -z "${MANIFESTS_DIR}" ]; then
    echo "MANIFEST_DIR is not set!!"
    exit 1
else
    process_csv
    if [[ -s ${MANIFESTS_DIR}/integreatly-${PRODUCT}/image_mirror_mapping ]]; then
      update_image_pull_secret
    fi
fi
